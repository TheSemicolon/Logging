{
  "name": "Logging",
  "tagline": "Powershell Logging Module",
  "body": "# Powershell Logging Module\r\n\r\n## Features\r\n\r\n* Separate thread that dispatch messages to targets to avoid bottleneck in the main script\r\n* Extensible with new targets\r\n* Custom formatting\r\n* Each target can have his own logging level\r\n\r\n## TL;DR\r\n\r\n```powershell\r\nSet-LoggingDefaultLevel -Level 'WARNING'\r\nAdd-LoggingTarget -Name Console\r\nAdd-LoggingTarget -Name File -Configuration @{Path = 'C:\\Temp\\example_%{+%Y%m%d}.log'}\r\n\r\n$Level = 'DEBUG', 'INFO', 'WARNING', 'ERROR'\r\nforeach ($i in 1..100) {\r\n    Write-Log -Level ($Level | Get-Random) ('Message n.{0}' -f $i)\r\n    Start-Sleep -Milliseconds (Get-Random -Min 100 -Max 1000)\r\n}\r\n\r\nWait-Logging        # See Note\r\n```\r\n\r\n### NOTE\r\n\r\nWhen used in *unattended* scripts (scheduled tasks, spawned process) you need to call Wait-Logging to avoid losing messages. If you run your main script in an interactive shell that stays open at the end of the execution you could avoid using it (keep in mind that if there are messeages in the queue when you close the shell, you'll lose it)\r\n\r\n## Configuration\r\n\r\nThe following section describe how to configure the Logging module.\r\n\r\n* Level\r\n* Format\r\n* Targets\r\n* CustomTargets\r\n    \r\n#### Level\r\n\r\nThe *Level* property defines the default logging level.\r\nValid values are:\r\n\r\n```powershell\r\n* NOTSET    ( 0)\r\n* DEBUG     (10)\r\n* INFO      (20)\r\n* WARNING   (30)\r\n* ERROR     (40)\r\n```\r\n\r\nFor example:\r\n\r\n```powershell\r\n> Get-LoggingDefaultLevel                       # Get the default value\r\nNOTSET                                          # NOTSET level\r\n> Set-LoggingDefaultLevel -Level 'ERROR'        # Set default level to ERROR\r\n> Get-LoggingDefaultLevel                       # Get the current global level\r\nERROR\r\n```\r\n\r\n#### Format\r\n\r\nThe *Format* property defines how the message is rendered.\r\n\r\nThe default value is: `[%{timestamp}] [%{level:-7}] %{message}`\r\n\r\nThe Log object has a number of attributes that are replaced in the format string to produce the message:\r\n\r\n| Format         | Description |\r\n| -------------- | ----------- |\r\n| `%{timestamp}` | Time when the log message was created. Defaults to `%Y-%m-%d %T%Z` (*2016-04-20 14:22:45+02*). Take a look at the [Technet article](https://technet.microsoft.com/en-us/library/hh849887.aspx#sectionSection7) about the UFormat parameter |\r\n| `%{level}`     | Text logging level for the message (*DEBUG*, *INFO*, *WARNING*, *ERROR*)\r\n| `%{levelno}`   | Number logging level for the message (*10*, *20*, *30*, *40*)\r\n| `%{message}`   | The logged message\r\n| `%{body}`      | The logged body (json format not pretty printed)\r\n\r\nAfter the placeholder name you can pass a padding or a date format string separated by a colon (`:`):\r\n\r\n##### Padding \r\n\r\nIf the padding value is negative, the field will be left aligned and padded with spaces on the right:\r\n\r\n```powershell\r\n> Set-LoggingDefaultFormat -Format '[%{level:-7}]'\r\n[DEBUG  ]\r\n[INFO   ]\r\n[WARNING]\r\n[ERROR  ]\r\n```\r\n\r\nIf the padding value is positive, the field will be right aligned and padded with spaces on the left:\r\n\r\n```powershell\r\n> Set-LoggingDefaultFormat -Format '[%{level:7}]'\r\n[  DEBUG]\r\n[   INFO]\r\n[WARNING]\r\n[  ERROR]\r\n```\r\n\r\n##### Date format string\r\n\r\nThe date format string starts with a plus sign (`+`) followed by **UFormat** parameters. See [here](https://technet.microsoft.com/en-us/library/hh849887.aspx#sectionSection7) for available formats.\r\n\r\n```powershell\r\n> Set-LoggingDefaultFormat -Format '%{timestamp}'\r\n2016-04-20 13:31:12+02\r\n> Set-LoggingDefaultFormat -Format '%{timestamp:+%A, %B %d, %Y}'\r\nWednesday, April 20, 2016\r\n> Set-LoggingDefaultFormat -Format '[%{timestamp:+%T:12}]'   # You could also use padding and date format string at the same time\r\n[   13:31:12]\r\n```\r\n\r\n### Targets\r\n\r\nThe *Targets* property stores the used logging targets, it's where you define where to route your messages.\r\n\r\nKeys of the hashtable depends on the target you are configuring. The module ships with 3 targets but you can write your own for specific usage.\r\n\r\n* Console\r\n* File\r\n* ElasticSearch\r\n* Slack\r\n\r\n#### Console\r\nFrom version 2.3.3 it supports acquiring lock for issues with git prompt that sometimes gets splitted during output.\r\nThe mutex name to acquire is ```ConsoleMtx```\r\n\r\n```powershell\r\n> Add-LoggingTarget -Name Console -Configuration @{\r\n    Level       = <NOTSET>          # <Not required> Sets the logging level for this target\r\n    Format      = <NOTSET>          # <Not required> Sets the logging format for this target\r\n}\r\n```\r\n\r\n#### File\r\n\r\n```powershell\r\n> Add-LoggingTarget -Name File -Configuration @{\r\n    Path        = <NOTSET>          # <Required> Sets the file destination (eg. 'C:\\Temp\\%{+%Y%m%d}.log') \r\n                                    #            It supports templating like $Logging.Format \r\n    PrintBody   = $false            # <Not required> Prints body message too\r\n    Append      = $true             # <Not required> Append to log file\r\n    Encoding    = 'ascii'           # <Not required> Sets the log file encoding\r\n    Level       = <NOTSET>          # <Not required> Sets the logging level for this target\r\n    Format      = <NOTSET>          # <Not required> Sets the logging format for this target\r\n}\r\n```\r\n\r\n#### ElasticSearch\r\n\r\n```powershell\r\n> Add-LoggingTarget -Name ElasticSearch -Configuration @{\r\n    ServerName  = <NOTSET>          # <Required> Sets the ES server name (eg. 'localhost')\r\n    ServerPort  = <NOTSET>          # <Required> Sets the ES server port (eg. 9200)\r\n    Index       = <NOTSET>          # <Required> Sets the ES index name to log to (eg. 'logs-%{+%Y.%m.%d}')\r\n                                    #            It supports templating like $Logging.Format         \r\n    Type        = <NOTSET>          # <Required> Sets the ES type for the message (eg. 'log')\r\n    Level       = <NOTSET>          # <Not required> Sets the logging format for this target\r\n}\r\n```\r\n\r\n#### Slack\r\n\r\n```powershell\r\n> Add-LoggingTarget -Name Slack -Configuration @{\r\n    ServerURI   = <NOTSET>          # <Required> Sets the Slack Webhook URI (eg. 'https://hooks.slack.com/services/xxxx/xxxx/xxxxxxxxxx')\r\n    Channel     = <NOTSET>          # <Not required> Overrides the default channel of the Webhook (eg. '@username' or '#other-channel')\r\n    BotName     = <NOTSET>          # <Not required> Overrides the default name of the bot (eg. 'PoshLogging')\r\n    Level       = <NOTSET>          # <Not required> Sets the logging format for this target\r\n}\r\n```\r\n\r\n### Email\r\n\r\n```powershell\r\n> Add-LoggingTarget -Name Email -Configuration @{\r\n    SMTPServer  = <NOTSET>          # <Required> SMTP server FQDN\r\n    From        = <NOTSET>          # <Required> From address\r\n    To          = @(<NOTSET>)       # <Required> An array of recipients. NB: @() are needed around the value\r\n    Subject     = '[%{level:-7}] %{message}'    # <Not required> Email subject. Supports formatting and expansion\r\n    Credential  = <NOTSET>          # <Not required> If your server uses authentication\r\n    Level       = <NOTSET>          # <Not required> Sets the logging format for this target\r\n}\r\n```\r\n\r\n### CustomTargets\r\n\r\nIt lets define a folder to load custom targets. \r\n\r\n```powershell\r\n> Set-LoggingCustomTargets -Path 'C:\\temp\\'\r\n> Get-LoggingTargetAvailable\r\nName                           Value\r\n----                           -----\r\nConsole                        {Configuration, ParamsRequired, Logger}\r\nElasticSearch                  {Configuration, ParamsRequired, Logger}\r\nFile                           {Configuration, ParamsRequired, Logger}\r\nSlack                          {Configuration, ParamsRequired, Logger}\r\nMyCustomTarget                 {Configuration, ParamsRequired, Logger}\r\n```\r\n\r\n## Contributing\r\n\r\nPlease use [issues](https://github.com/EsOsO/Logging/issues) system or GitHub pull requests to contribute to the project.\r\n\r\nFor more information, see [CONTRIBUTING](CONTRIBUTING.md)\r\n\r\n## Notes\r\n\r\n* The dispatcher thread starts the first time a `Write-Log` command is executed and keeps running in the background to dispatch new messages until the module is removed.\r\n* The runspace code is inspired by the work and research of Boe Prox (@proxb).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}